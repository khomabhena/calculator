{"version":3,"sources":["components/CalculatorElements.js","components/Calculator.js","components/ScreenElements.js","App.js","reportWebVitals.js","index.js"],"names":["Container","styled","div","CalculatorWrap","OutputWrap","ButtonWrap","PrevOperand","CurrentOperand","Buttons","button","span","Calculator","useState","prev","setStatePrev","current","setStateCurrent","operand","setStateOperand","stop","setStateStop","equals","setStateEquals","operands","handleNums","e","String","target","value","handleOperand","substr","length","onClick","indexOf","prevNum","parseFloat","curNum","h2","h1","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a398bd5.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    height: 100vh;\r\n    position: relative;\r\n    align-content: center;\r\n    align-items: center;\r\n    padding: 0;\r\n    margin: 0;\r\n    background: linear-gradient(to right, #00AAFF, #00FF6C);\r\n`\r\n\r\nexport const CalculatorWrap = styled.div`\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n`\r\n\r\nexport const OutputWrap = styled.div`\r\n    display: grid;\r\n    min-height: 140px;\r\n    grid-template-columns: 100px 100px 100px 100px;\r\n`\r\n\r\nexport const ButtonWrap = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 100px 100px 100px 100px;\r\n`\r\n\r\nexport const PrevOperand = styled.div`\r\n    grid-column-end: span 4;\r\n    padding: 20px 12px;\r\n    text-align: right;\r\n    min-height: 70px;\r\n    word-wrap: break-word;\r\n    word-break: break-all;\r\n    color: rgba(255, 255, 255, .75);\r\n    background-color: rgba(0, 0, 0, .75);\r\n    font-size: 1.5rem;\r\n`\r\n\r\nexport const CurrentOperand = styled.div`\r\n    padding: 0px 12px 12px;\r\n    grid-column-end: span 4;\r\n    text-align: right;\r\n    word-wrap: break-word;\r\n    word-break: break-all;\r\n    color: white;\r\n    min-height: 70px;\r\n    font-size: 2.5rem;\r\n    background-color: rgba(0, 0, 0, .75);\r\n`\r\n\r\nexport const Buttons = styled.button`\r\n    cursor: pointer;\r\n    padding: 20px 0;\r\n    font-size: 2rem;\r\n    border: 1px solid white;\r\n    outline: none;\r\n    background-color: rgba(255, 255, 255, .75);\r\n    grid-column-end: ${({span}) => (span == true ? 'span 2': 'span 1')};\r\n\r\n    &:hover {\r\n    background-color: rgba(255, 255, 255, .9);\r\n    }\r\n`","import React, { useState } from 'react'\r\nimport { OutputWrap, ButtonWrap, Buttons, CalculatorWrap, Container, CurrentOperand, PrevOperand } from './CalculatorElements'\r\n\r\n\r\nconst Calculator = () => {\r\n    const [prev, setStatePrev] = useState('');\r\n    const [current, setStateCurrent] = useState('');\r\n    const [operand, setStateOperand] = useState('');\r\n    const [stop, setStateStop] = useState(false);\r\n    const [equals, setStateEquals] = useState(false);\r\n\r\n    const operands = {\r\n        divide: '/',\r\n        multiply: '*',\r\n        add: '+',\r\n        subtract: '-'\r\n    }\r\n\r\n    function handleNums(e) {\r\n        if (equals === true) {\r\n            setStateStop(false);\r\n            setStatePrev(String(e.target.value));\r\n            setStateCurrent('');\r\n            setStateOperand('');\r\n            setStateEquals(false);\r\n        } else {\r\n            if (operand !== '') {\r\n                setStateStop(true);\r\n                setStateCurrent(current + String(e.target.value));\r\n            } else {\r\n                setStatePrev(prev + String(e.target.value));\r\n            }\r\n        }\r\n    }\r\n\r\n    function handlePoint(e) {\r\n        if (prev.indexOf(e.target.value) < 0)\r\n            handleNums(e);\r\n    }\r\n\r\n    function handleDel() {\r\n        if (stop == false) {\r\n            setStatePrev(prev.substr(0, prev.length - 1));\r\n            setStateOperand('');\r\n        } else {\r\n            if (current !== '') {\r\n                setStateCurrent(current.substr(0, current.length - 1));\r\n            } else {\r\n                setStateOperand('');\r\n                setStateStop(false);\r\n                setStatePrev(prev.substr(0, prev.length - 1));\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleAC() {\r\n        setStatePrev('');\r\n        setStateCurrent('');\r\n        setStateOperand('');\r\n        setStateStop(false);\r\n        setStateEquals(false);\r\n    }\r\n\r\n    function handleOperand(e) {\r\n        if (equals === true) {\r\n            setStatePrev(current + e.target.value);\r\n            setStateOperand(e.target.value);\r\n            setStateCurrent('');\r\n            setStateEquals(false);\r\n        } else {\r\n            if (stop === false) {\r\n                if (operand === '') {\r\n                    setStatePrev(prev + e.target.value);\r\n                } else {\r\n                    setStatePrev(prev.substr(0, prev.length - 1) + e.target.value);\r\n                }\r\n                setStateOperand(e.target.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleEquals() {\r\n        const prevNum = parseFloat(prev.substr(0, prev.length - 1));\r\n        const curNum = parseFloat(current);\r\n\r\n        setStateEquals(true);\r\n\r\n        switch (operand) {\r\n            case operands.divide:\r\n                setStateCurrent(String(prevNum / curNum));\r\n                break;\r\n            case operands.multiply:\r\n                setStateCurrent(String(prevNum * curNum));\r\n                break;\r\n            case operands.add:\r\n                setStateCurrent(String(prevNum + curNum));\r\n                break;\r\n            case operands.subtract:\r\n                setStateCurrent(String(prevNum - curNum));\r\n                break;\r\n        \r\n            default:\r\n                break;\r\n        }\r\n        setStatePrev(prev + current);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <CalculatorWrap>\r\n                    <OutputWrap>\r\n                        <PrevOperand>{prev}</PrevOperand>\r\n                        <CurrentOperand>{current}</CurrentOperand>\r\n                    </OutputWrap>\r\n                    <ButtonWrap>\r\n                        <Buttons onClick={handleAC} span={true}>AC</Buttons>\r\n                        <Buttons onClick={handleDel}>DEL</Buttons>\r\n                        <Buttons value={operands.divide} onClick={handleOperand}>/</Buttons>\r\n                        <Buttons value='1' onClick={handleNums}>1</Buttons>\r\n                        <Buttons value='2' onClick={handleNums}>2</Buttons>\r\n                        <Buttons value='3' onClick={handleNums}>3</Buttons>\r\n                        <Buttons value={operands.multiply} onClick={handleOperand}>*</Buttons>\r\n                        <Buttons value='4' onClick={handleNums}>4</Buttons>\r\n                        <Buttons value='5' onClick={handleNums}>5</Buttons>\r\n                        <Buttons value='6' onClick={handleNums}>6</Buttons>\r\n                        <Buttons value={operands.add} onClick={handleOperand}>+</Buttons>\r\n                        <Buttons value='7' onClick={handleNums}>7</Buttons>\r\n                        <Buttons value='8' onClick={handleNums}>8</Buttons>\r\n                        <Buttons value='9' onClick={handleNums}>9</Buttons>\r\n                        <Buttons value={operands.subtract} onClick={handleOperand}>-</Buttons>\r\n                        <Buttons value='.' onClick={handlePoint}>.</Buttons>\r\n                        <Buttons value='0' onClick={handleNums}>0</Buttons>\r\n                        <Buttons onClick={handleEquals} span={true}>=</Buttons>\r\n                    </ButtonWrap>\r\n                </CalculatorWrap>\r\n            </Container>   \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Calculator\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    padding: 0;\r\n    margin: 0;\r\n    background: linear-gradient(to right, #00AAFF, #00FF6C);\r\n    min-height: 100vh;\r\n    max-width: 400px;\r\n`\r\n\r\nexport const Output = styled.div`\r\n    background-color: rgba(0, 0, 0, .75);\r\n    justify-content: center;\r\n    align-content: center;\r\n    display: flex;\r\n    max-width: 400px;\r\n    align-items: flex-end;\r\n    flex-direction: column;\r\n    word-wrap: break-word;\r\n    word-break: break-all;\r\n\r\n`\r\n\r\nexport const PreviousOperand = styled.h2`\r\n    font-size: 30px;\r\n    color: rgba(255, 255, 255, .75);\r\n    font-size: 1.5rem;\r\n`\r\n\r\nexport const CurrentOperand = styled.h1`\r\n    font-size: 35px;\r\n    color: white;\r\n    font-size: 2.5rem;\r\n`\r\n\r\nexport const ButtonContainer = styled.div`\r\n    display: grid;\r\n    justify-content: center;\r\n    align-content: center;\r\n    grid-template-columns: repeat(4, 100px);\r\n    /* grid: 80px 80px 80px 80px 80px / auto auto auto auto; */\r\n`\r\n\r\nexport const Buttons = styled.button`\r\n    cursor: pointer;\r\n    padding: 20px 0;\r\n    font-size: 2rem;\r\n    border: 1px solid white;\r\n    outline: none;\r\n    background-color: rgba(255, 255, 255, .75);\r\n    grid-column-end: ${({span}) => (span == true ? 'span 2' : 'span 1')};\r\n\r\n    &:hover {\r\n    background-color: rgba(255, 255, 255, .9);\r\n    }\r\n`","\r\nimport './App.css';\r\nimport Calculator from './components/Calculator';\r\nimport ScreenEl from './components/Screen';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Calculator />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}